import numpy as np
import random as rd
from PIL import Image


mat_width = 11970
mat_height = 5940

width30 = mat_width//30
height30 = mat_height//30


map30 = np.zeros((int(height30), int(width30)))

proportion_terre = (width30*height30)//2
proportion_herbe = 4*(width30*height30)//10
proportion_pierre = (width30*height30)//10

for i in range(int(proportion_herbe)) :
    x = rd.randrange(0, int(height30))
    y = rd.randrange(0, int(width30))
    map30[x][y] = 1

compteur = 0
while compteur != proportion_pierre :
    x = rd.randrange(0, int(height30))
    y = rd.randrange(0, int(width30))
    if map30[x][y] == 0 :   
        map30[x][y] = 2
        compteur += 1
        
if width30%2 == 0 and height30%2 == 0 :
    map30[height30//2][width30//2] = 1
    map30[height30//2 - 1][width30//2] = 1
    map30[height30//2][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 - 1] = 1
        
if width30%2 != 0 and height30%2 != 0 :
    map30[height30//2][width30//2] = 1
    map30[height30//2 + 1][width30//2] = 1
    map30[height30//2][width30//2 + 1] = 1
    map30[height30//2 + 1][width30//2 + 1] = 1
    map30[height30//2 + 1][width30//2 - 1] = 1
    map30[height30//2][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 + 1] = 1
    map30[height30//2 - 1][width30//2] = 1
    
if width30%2 != 0 and height30%2 == 0 :
    map30[height30//2][width30//2] = 1
    map30[height30//2][width30//2 + 1] = 1
    map30[height30//2][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 + 1] = 1
    map30[height30//2 - 1][width30//2] = 1
    
if width30%2 == 0 and height30%2 != 0 :
    map30[height30//2][width30//2] = 1
    map30[height30//2 + 1][width30//2] = 1
    map30[height30//2 + 1][width30//2 - 1] = 1
    map30[height30//2][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2 - 1] = 1
    map30[height30//2 - 1][width30//2] = 1
        
        
mat_map = np.zeros((mat_height, mat_width))

for i in range(int(height30)):
    for j in range(int(width30)):
        if map30[i][j] == 0:
            mat_map[i * 30:(i + 1) * 30, j * 30:(j + 1) * 30] = np.zeros((30, 30), dtype=map30.dtype)
        if map30[i][j] == 1:
            mat_map[i * 30:(i + 1) * 30, j * 30:(j + 1) * 30] = np.ones((30, 30), dtype=map30.dtype)
        if map30[i][j] == 2:
            mat_map[i * 30:(i + 1) * 30, j * 30:(j + 1) * 30] = np.full((30, 30), 2, dtype=map30.dtype)

black30 = Image.new('RGB', (30, 30), (0, 0, 0))
grass30 = Image.open("C:/Users/kaczo/Documents/projet CCV/RATHANA-BOUCHART-KACZOR/documents/images/grass30.png")
dirt30 = Image.open("C:/Users/kaczo/Documents/projet CCV/RATHANA-BOUCHART-KACZOR/documents/images/dirt30.png")
rock30 = Image.open("C:/Users/kaczo/Documents/projet CCV/RATHANA-BOUCHART-KACZOR/documents/images/rock30.png")

images = [dirt30, grass30, rock30]

carte = Image.new('RGB', (mat_width, mat_height), (255, 255, 255))
carte_collisions = Image.new('RGB', (mat_width, mat_height), (255, 255, 255))

for i in range(int(height30)):
    for j in range(int(width30)):
        # Récupérer l'image correspondante à la valeur de la matrice
        texture = images[int(map30[i][j])]
        # Coller cette image dans la nouvelle image à la position correcte
        carte.paste(texture, (j * 30, i * 30))
        if int(map30[i][j]) != 2 :
            carte_collisions.paste(texture, (j * 30, i * 30))
        else : carte_collisions.paste(black30, (j * 30, i * 30))
            
        
carte.save("C:/Users/kaczo/Documents/projet CCV/RATHANA-BOUCHART-KACZOR/documents/images/carte.png")
carte_collisions.save("C:/Users/kaczo/Documents/projet CCV/RATHANA-BOUCHART-KACZOR/documents/images/carte_collisions.png")